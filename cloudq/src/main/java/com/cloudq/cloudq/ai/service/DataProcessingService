package com.cloudq.cloudq.ai.service;


import com.cloudq.cloudq.ai.engine.DataPreprocessor;
import org.apache.spark.sql.Dataset;
import org.apache.spark.sql.Row;
import org.apache.spark.sql.SparkSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * DataPreprocessingService is responsible for orchestrating the preprocessing of data
 * for AI models, including data cleansing, transformation, and normalization.
 */
public class DataPreprocessingService {
    private static final Logger logger = LoggerFactory.getLogger(DataPreprocessingService.class);

    private final SparkSession spark;
    private final DataPreprocessor dataPreprocessor;

    // Constructor
    public DataPreprocessingService(SparkSession spark) {
        if (spark == null) {
            throw new IllegalArgumentException("SparkSession cannot be null");
        }
        this.spark = spark;
        this.dataPreprocessor = new DataPreprocessor(spark);
    }

    /**
     * Loads raw data from the specified path.
     *
     * @param dataPath The path to the raw data file.
     * @return Dataset<Row> containing the raw data.
     */
    public Dataset<Row> loadRawData(String dataPath) {
        logger.info("Loading raw data from path: {}", dataPath);
        return spark.read()
                .option("header", "true")
                .option("inferSchema", "true")
                .csv(dataPath);
    }

    /**
     * Cleanses and preprocesses the data using the DataPreprocessor class.
     *
     * @param rawData The raw data as a Dataset<Row>.
     * @return Dataset<Row> containing the cleansed and preprocessed data.
     */
    public Dataset<Row> preprocessData(Dataset<Row> rawData) {
        logger.info("Starting data preprocessing.");

        // Handle missing values
        Dataset<Row> cleanedData = dataPreprocessor.handleMissingValues(rawData);
        logger.info("Missing values handled.");

        // Normalize numerical features
        Dataset<Row> normalizedData = dataPreprocessor.normalizeFeatures(cleanedData);
        logger.info("Numerical features normalized.");

        // Select relevant features
        Dataset<Row> finalData = dataPreprocessor.selectRelevantFeatures(normalizedData);
        logger.info("Relevant features selected. Data preprocessing complete.");

        return finalData;
    }

    /**
     * Saves the preprocessed data to a specified output path.
     *
     * @param data         The preprocessed Dataset<Row> to be saved.
     * @param outputPath   The path where the preprocessed data will be saved.
     */
    public void savePreprocessedData(Dataset<Row> data, String outputPath) {
        logger.info("Saving preprocessed data to path: {}", outputPath);
        data.write()
                .option("header", "true")
                .csv(outputPath);
        logger.info("Preprocessed data saved successfully.");
    }
}
